	.EQU 	KBD_CNTL, $000
	.EQU 	KBD_STAT, $000
	.EQU 	KBD_DATA, $001
	.EQU 	KBD_FLUSH, $40
	.EQU 	TIM_CNTL, $030
	.EQU 	TIM_STAT, $030
	.EQU 	TIM_VALUE, $031
	.EQU 	TIM_COUNT, $034

	.EQU 	SCORE, $100	; $100-$10A supporting 11 digits?
	.EQU 	LEVEL, $124	; $124-$125 supporting up to thousands
	.EQU 	CRT_END, $313
	.EQU 	CRT_CNTL, $316
	.EQU 	CRT_ROWS, $0E	; Number of rows in CRT
	.EQU 	CRT_COLS, $26	; Number of columns per row
          	.EQU 	CLEAR_DISPLAY, $01
	.EQU 	BELL, $06

	.EQU 	INTERRUPT_ENA, $80
	.EQU 	RESET_READY_BIT, $40
	.EQU 	START_AFTER_LOAD, $10
	.EQU 	ENABLE_RESET_AND_START, $D0
	.EQU 	ENABLE_AND_RESET, $C0

	; Game Related .EQUs
	.EQU	GROUND, $5F	; ASCII for "_"

SETUP:	LDS# $E00
	; Load initial stage
	; Probably just the ground, ship, score, level
	; Let the user have maybe 5 seconds before ships start spawning in
MAIN:	JSR START_GAME
	HLT


	.EQU	@, $200
; void display()

; void startGame()
	; Loads graphics
	; Need to go through first row and load score and level
	; Score: ######	Lvl: ####
	; Ground can be ------ or _____ see what looks better
START_GAME:    BGN#  0
               PSHA
               PSHX
               CLR   COUNT
               LDA#  GROUND
               LDX#  CRT_END-CRT_COLS
               
PRINT_GROUND:  OUTB+ CRT_VBUF
               ADX#  1
               INC   COUNT
               CMA#  CRT_COLS
               JNE   PRINT_GROUND
               POPA
               POPX
               FIN#  0
               RTN          

; void moveTurret(char key, int x)

; void play()

; Need a subroutine for moving the ship
; Maybe have a blkw holding the ports that the ship occupies for easy finding and moving?

COUNT:  .BLKW 0
; Keyboard ISR for moving the ship left or right
; Might need to let the ship move offscreen if 
; we are planning to make 1 port enemy ship sizes



; /\
;|--|

; ^
;|-|